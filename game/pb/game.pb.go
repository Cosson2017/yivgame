// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	game.proto

It has these top-level messages:
	Frame
	EnterTableReq
	SitdownReq
	BetReq
	DuelReq
	FriendReq
	GiftReq
	ChatReq
	DelegateReq
	GeRes
	RevealRes
	Player
	Table
	PlayerSeat
	Reveal
	GeCall
	GiveUp
	Duel
	Bet
	DuelResult
	FriendAdd
	FriendAddResult
	SendGift
	GameOver
	TableResult
	CardDeal
	ChatMsg
	NetInfo
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 双向流包
type Frame struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Frame) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// 双向流请求包
type EnterTableReq struct {
	Uid int64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	// 登陆令牌
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	// 房间等级
	RoomClass int32 `protobuf:"varint,3,opt,name=roomClass" json:"roomClass,omitempty"`
}

func (m *EnterTableReq) Reset()                    { *m = EnterTableReq{} }
func (m *EnterTableReq) String() string            { return proto.CompactTextString(m) }
func (*EnterTableReq) ProtoMessage()               {}
func (*EnterTableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EnterTableReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *EnterTableReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EnterTableReq) GetRoomClass() int32 {
	if m != nil {
		return m.RoomClass
	}
	return 0
}

type SitdownReq struct {
	// 座位号
	Seat int32 `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
}

func (m *SitdownReq) Reset()                    { *m = SitdownReq{} }
func (m *SitdownReq) String() string            { return proto.CompactTextString(m) }
func (*SitdownReq) ProtoMessage()               {}
func (*SitdownReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SitdownReq) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

type BetReq struct {
	// 下注金币数量
	Coins int64 `protobuf:"varint,1,opt,name=coins" json:"coins,omitempty"`
}

func (m *BetReq) Reset()                    { *m = BetReq{} }
func (m *BetReq) String() string            { return proto.CompactTextString(m) }
func (*BetReq) ProtoMessage()               {}
func (*BetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BetReq) GetCoins() int64 {
	if m != nil {
		return m.Coins
	}
	return 0
}

type DuelReq struct {
	// 被比牌玩家ID
	Rival int64 `protobuf:"varint,1,opt,name=rival" json:"rival,omitempty"`
}

func (m *DuelReq) Reset()                    { *m = DuelReq{} }
func (m *DuelReq) String() string            { return proto.CompactTextString(m) }
func (*DuelReq) ProtoMessage()               {}
func (*DuelReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DuelReq) GetRival() int64 {
	if m != nil {
		return m.Rival
	}
	return 0
}

type FriendReq struct {
	// 被加好友ID
	ToId int64 `protobuf:"varint,1,opt,name=toId" json:"toId,omitempty"`
}

func (m *FriendReq) Reset()                    { *m = FriendReq{} }
func (m *FriendReq) String() string            { return proto.CompactTextString(m) }
func (*FriendReq) ProtoMessage()               {}
func (*FriendReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FriendReq) GetToId() int64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

type GiftReq struct {
	// 被加好友ID
	ToId int64 `protobuf:"varint,1,opt,name=toId" json:"toId,omitempty"`
	// 礼物ID
	GiftId int32 `protobuf:"varint,2,opt,name=giftId" json:"giftId,omitempty"`
	// 礼物数量
	Amount int32 `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
}

func (m *GiftReq) Reset()                    { *m = GiftReq{} }
func (m *GiftReq) String() string            { return proto.CompactTextString(m) }
func (*GiftReq) ProtoMessage()               {}
func (*GiftReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GiftReq) GetToId() int64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *GiftReq) GetGiftId() int32 {
	if m != nil {
		return m.GiftId
	}
	return 0
}

func (m *GiftReq) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ChatReq struct {
	// 消息类型或消息编码
	Mid int32 `protobuf:"varint,1,opt,name=mid" json:"mid,omitempty"`
	// 自定义消息内容
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *ChatReq) Reset()                    { *m = ChatReq{} }
func (m *ChatReq) String() string            { return proto.CompactTextString(m) }
func (*ChatReq) ProtoMessage()               {}
func (*ChatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChatReq) GetMid() int32 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ChatReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type DelegateReq struct {
	// 托管操作[1:自动弃牌，2:自动跟注]
	Method int32 `protobuf:"varint,1,opt,name=method" json:"method,omitempty"`
	Action bool  `protobuf:"varint,2,opt,name=action" json:"action,omitempty"`
}

func (m *DelegateReq) Reset()                    { *m = DelegateReq{} }
func (m *DelegateReq) String() string            { return proto.CompactTextString(m) }
func (*DelegateReq) ProtoMessage()               {}
func (*DelegateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DelegateReq) GetMethod() int32 {
	if m != nil {
		return m.Method
	}
	return 0
}

func (m *DelegateReq) GetAction() bool {
	if m != nil {
		return m.Action
	}
	return false
}

type GeRes struct {
	Code     int32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	CallSeat int32 `protobuf:"varint,2,opt,name=callSeat" json:"callSeat,omitempty"`
}

func (m *GeRes) Reset()                    { *m = GeRes{} }
func (m *GeRes) String() string            { return proto.CompactTextString(m) }
func (*GeRes) ProtoMessage()               {}
func (*GeRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GeRes) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GeRes) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

type RevealRes struct {
	Code     int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	CallSeat int32  `protobuf:"varint,2,opt,name=callSeat" json:"callSeat,omitempty"`
	Cards    []byte `protobuf:"bytes,3,opt,name=cards,proto3" json:"cards,omitempty"`
	// 牌型[1:高牌,2:对子,3:同花,4:顺子,5:同花顺,6:豹子]
	CardType int32 `protobuf:"varint,4,opt,name=cardType" json:"cardType,omitempty"`
}

func (m *RevealRes) Reset()                    { *m = RevealRes{} }
func (m *RevealRes) String() string            { return proto.CompactTextString(m) }
func (*RevealRes) ProtoMessage()               {}
func (*RevealRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RevealRes) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RevealRes) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

func (m *RevealRes) GetCards() []byte {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *RevealRes) GetCardType() int32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

type Player struct {
	// 玩家ID
	Uid int64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	// 玩家座标
	SeatCode int32 `protobuf:"varint,2,opt,name=seatCode" json:"seatCode,omitempty"`
	// 是否未看牌
	Blind bool `protobuf:"varint,3,opt,name=blind" json:"blind,omitempty"`
	// 牌桌座位号
	Seat int32 `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	// 金币数量
	Coin int64 `protobuf:"varint,5,opt,name=coin" json:"coin,omitempty"`
	// 昵称
	Nick string `protobuf:"bytes,6,opt,name=nick" json:"nick,omitempty"`
	// 头像路径
	Avatar string `protobuf:"bytes,7,opt,name=avatar" json:"avatar,omitempty"`
	// 玩家牌
	Cards []byte `protobuf:"bytes,8,opt,name=cards,proto3" json:"cards,omitempty"`
	// 本局下注金币
	BetCoin int64 `protobuf:"varint,9,opt,name=betCoin" json:"betCoin,omitempty"`
	// 玩家特征
	Character int32 `protobuf:"varint,10,opt,name=character" json:"character,omitempty"`
	// 玩家当前牌局状态
	Status int32 `protobuf:"varint,11,opt,name=status" json:"status,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Player) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Player) GetSeatCode() int32 {
	if m != nil {
		return m.SeatCode
	}
	return 0
}

func (m *Player) GetBlind() bool {
	if m != nil {
		return m.Blind
	}
	return false
}

func (m *Player) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *Player) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *Player) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *Player) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Player) GetCards() []byte {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *Player) GetBetCoin() int64 {
	if m != nil {
		return m.BetCoin
	}
	return 0
}

func (m *Player) GetCharacter() int32 {
	if m != nil {
		return m.Character
	}
	return 0
}

func (m *Player) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type Table struct {
	// 桌号
	TableId int32 `protobuf:"varint,1,opt,name=tableId" json:"tableId,omitempty"`
	// 当前叫牌座号
	CallSeat int32 `protobuf:"varint,2,opt,name=callSeat" json:"callSeat,omitempty"`
	// 庄家座号
	BankerSeat int32 `protobuf:"varint,3,opt,name=bankerSeat" json:"bankerSeat,omitempty"`
	// 总注池
	Jackpot int64 `protobuf:"varint,4,opt,name=jackpot" json:"jackpot,omitempty"`
	// 当局轮数
	Round int32 `protobuf:"varint,5,opt,name=round" json:"round,omitempty"`
	// 当轮下注值
	RoundBet int64 `protobuf:"varint,6,opt,name=roundBet" json:"roundBet,omitempty"`
	// 牌局状态，0：等待，1：读秒准备中，3：进行中
	Status int32 `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`
	// 桌内玩家列表
	Players []*Player `protobuf:"bytes,8,rep,name=players" json:"players,omitempty"`
	// 返回码
	Code int32 `protobuf:"varint,9,opt,name=code" json:"code,omitempty"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Table) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *Table) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

func (m *Table) GetBankerSeat() int32 {
	if m != nil {
		return m.BankerSeat
	}
	return 0
}

func (m *Table) GetJackpot() int64 {
	if m != nil {
		return m.Jackpot
	}
	return 0
}

func (m *Table) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Table) GetRoundBet() int64 {
	if m != nil {
		return m.RoundBet
	}
	return 0
}

func (m *Table) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Table) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Table) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type PlayerSeat struct {
	// 玩家ID
	Uid int64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	// 玩家座号
	Seat     int32 `protobuf:"varint,2,opt,name=seat" json:"seat,omitempty"`
	CallSeat int32 `protobuf:"varint,3,opt,name=callSeat" json:"callSeat,omitempty"`
}

func (m *PlayerSeat) Reset()                    { *m = PlayerSeat{} }
func (m *PlayerSeat) String() string            { return proto.CompactTextString(m) }
func (*PlayerSeat) ProtoMessage()               {}
func (*PlayerSeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PlayerSeat) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PlayerSeat) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *PlayerSeat) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

type Reveal struct {
	// 座号
	Seat     int32  `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	CallSeat int32  `protobuf:"varint,2,opt,name=callSeat" json:"callSeat,omitempty"`
	Cards    []byte `protobuf:"bytes,3,opt,name=cards,proto3" json:"cards,omitempty"`
	// 牌型[1:高牌,2:对子,3:同花,4:顺子,5:同花顺,6:豹子]
	CardType int32 `protobuf:"varint,4,opt,name=cardType" json:"cardType,omitempty"`
}

func (m *Reveal) Reset()                    { *m = Reveal{} }
func (m *Reveal) String() string            { return proto.CompactTextString(m) }
func (*Reveal) ProtoMessage()               {}
func (*Reveal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Reveal) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *Reveal) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

func (m *Reveal) GetCards() []byte {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *Reveal) GetCardType() int32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

type GeCall struct {
	// 座号
	Seat     int32 `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	CallSeat int32 `protobuf:"varint,2,opt,name=callSeat" json:"callSeat,omitempty"`
}

func (m *GeCall) Reset()                    { *m = GeCall{} }
func (m *GeCall) String() string            { return proto.CompactTextString(m) }
func (*GeCall) ProtoMessage()               {}
func (*GeCall) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GeCall) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *GeCall) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

type GiveUp struct {
	// 座号
	Seat int32 `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	// 下一个叫牌座号
	CallSeat int32 `protobuf:"varint,2,opt,name=callSeat" json:"callSeat,omitempty"`
}

func (m *GiveUp) Reset()                    { *m = GiveUp{} }
func (m *GiveUp) String() string            { return proto.CompactTextString(m) }
func (*GiveUp) ProtoMessage()               {}
func (*GiveUp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GiveUp) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *GiveUp) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

type Duel struct {
	// 比牌发起者、拒绝者或接受者座号（根据协议定）
	FromSeat int32 `protobuf:"varint,1,opt,name=fromSeat" json:"fromSeat,omitempty"`
	// 比牌发起者、拒绝者或接受者座号（根据协议定）
	ToSeat int32 `protobuf:"varint,2,opt,name=toSeat" json:"toSeat,omitempty"`
	// 下一个叫牌座号
	CallSeat int32 `protobuf:"varint,3,opt,name=callSeat" json:"callSeat,omitempty"`
}

func (m *Duel) Reset()                    { *m = Duel{} }
func (m *Duel) String() string            { return proto.CompactTextString(m) }
func (*Duel) ProtoMessage()               {}
func (*Duel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Duel) GetFromSeat() int32 {
	if m != nil {
		return m.FromSeat
	}
	return 0
}

func (m *Duel) GetToSeat() int32 {
	if m != nil {
		return m.ToSeat
	}
	return 0
}

func (m *Duel) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

type Bet struct {
	// 下注玩家座号
	Seat int32 `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	// 下注金币数量
	Coins int64 `protobuf:"varint,2,opt,name=coins" json:"coins,omitempty"`
	// 下一个叫牌座号
	CallSeat int32 `protobuf:"varint,3,opt,name=callSeat" json:"callSeat,omitempty"`
}

func (m *Bet) Reset()                    { *m = Bet{} }
func (m *Bet) String() string            { return proto.CompactTextString(m) }
func (*Bet) ProtoMessage()               {}
func (*Bet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Bet) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *Bet) GetCoins() int64 {
	if m != nil {
		return m.Coins
	}
	return 0
}

func (m *Bet) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

type DuelResult struct {
	// 比牌发起者座号
	FromSeat int32 `protobuf:"varint,1,opt,name=fromSeat" json:"fromSeat,omitempty"`
	// 被比牌者座号
	ToSeat int32 `protobuf:"varint,2,opt,name=toSeat" json:"toSeat,omitempty"`
	// 胜者座号
	WinSeat int32 `protobuf:"varint,3,opt,name=winSeat" json:"winSeat,omitempty"`
	// 比牌二者的牌组
	DuelCards map[int32][]byte `protobuf:"bytes,4,rep,name=duelCards" json:"duelCards,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 下一个叫牌座号
	CallSeat int32 `protobuf:"varint,5,opt,name=callSeat" json:"callSeat,omitempty"`
}

func (m *DuelResult) Reset()                    { *m = DuelResult{} }
func (m *DuelResult) String() string            { return proto.CompactTextString(m) }
func (*DuelResult) ProtoMessage()               {}
func (*DuelResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DuelResult) GetFromSeat() int32 {
	if m != nil {
		return m.FromSeat
	}
	return 0
}

func (m *DuelResult) GetToSeat() int32 {
	if m != nil {
		return m.ToSeat
	}
	return 0
}

func (m *DuelResult) GetWinSeat() int32 {
	if m != nil {
		return m.WinSeat
	}
	return 0
}

func (m *DuelResult) GetDuelCards() map[int32][]byte {
	if m != nil {
		return m.DuelCards
	}
	return nil
}

func (m *DuelResult) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

type FriendAdd struct {
	// 发起、拒绝或接受加好友玩家座号（根据协议定）
	FromId int64 `protobuf:"varint,1,opt,name=fromId" json:"fromId,omitempty"`
	// 发起、拒绝或接受加好友玩家座号（根据协议定）
	ToId int64 `protobuf:"varint,2,opt,name=toId" json:"toId,omitempty"`
}

func (m *FriendAdd) Reset()                    { *m = FriendAdd{} }
func (m *FriendAdd) String() string            { return proto.CompactTextString(m) }
func (*FriendAdd) ProtoMessage()               {}
func (*FriendAdd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FriendAdd) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *FriendAdd) GetToId() int64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

type FriendAddResult struct {
	// 发起加好友玩家座号
	FromId int64 `protobuf:"varint,1,opt,name=fromId" json:"fromId,omitempty"`
	// 被加好友玩家座号
	ToId int64 `protobuf:"varint,2,opt,name=toId" json:"toId,omitempty"`
	// 加友好是否接受
	Accept bool `protobuf:"varint,3,opt,name=accept" json:"accept,omitempty"`
}

func (m *FriendAddResult) Reset()                    { *m = FriendAddResult{} }
func (m *FriendAddResult) String() string            { return proto.CompactTextString(m) }
func (*FriendAddResult) ProtoMessage()               {}
func (*FriendAddResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *FriendAddResult) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *FriendAddResult) GetToId() int64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *FriendAddResult) GetAccept() bool {
	if m != nil {
		return m.Accept
	}
	return false
}

type SendGift struct {
	// 送礼物玩家座号
	FromId int64 `protobuf:"varint,1,opt,name=fromId" json:"fromId,omitempty"`
	// 被送礼物玩家座号
	ToId int64 `protobuf:"varint,2,opt,name=toId" json:"toId,omitempty"`
	// 礼物编号
	GiftId int32 `protobuf:"varint,3,opt,name=giftId" json:"giftId,omitempty"`
	// 礼物数量
	Amount int32 `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
}

func (m *SendGift) Reset()                    { *m = SendGift{} }
func (m *SendGift) String() string            { return proto.CompactTextString(m) }
func (*SendGift) ProtoMessage()               {}
func (*SendGift) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SendGift) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *SendGift) GetToId() int64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *SendGift) GetGiftId() int32 {
	if m != nil {
		return m.GiftId
	}
	return 0
}

func (m *SendGift) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type GameOver struct {
	// 胜者座号
	WinUid int64 `protobuf:"varint,1,opt,name=winUid" json:"winUid,omitempty"`
	// 税后金币
	Result map[string]*TableResult `protobuf:"bytes,2,rep,name=result" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GameOver) Reset()                    { *m = GameOver{} }
func (m *GameOver) String() string            { return proto.CompactTextString(m) }
func (*GameOver) ProtoMessage()               {}
func (*GameOver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GameOver) GetWinUid() int64 {
	if m != nil {
		return m.WinUid
	}
	return 0
}

func (m *GameOver) GetResult() map[string]*TableResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type TableResult struct {
	BetCoins  int64  `protobuf:"varint,1,opt,name=betCoins" json:"betCoins,omitempty"`
	Cards     []byte `protobuf:"bytes,2,opt,name=cards,proto3" json:"cards,omitempty"`
	CardsType int32  `protobuf:"varint,3,opt,name=cardsType" json:"cardsType,omitempty"`
	GreetType int32  `protobuf:"varint,4,opt,name=greetType" json:"greetType,omitempty"`
}

func (m *TableResult) Reset()                    { *m = TableResult{} }
func (m *TableResult) String() string            { return proto.CompactTextString(m) }
func (*TableResult) ProtoMessage()               {}
func (*TableResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *TableResult) GetBetCoins() int64 {
	if m != nil {
		return m.BetCoins
	}
	return 0
}

func (m *TableResult) GetCards() []byte {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *TableResult) GetCardsType() int32 {
	if m != nil {
		return m.CardsType
	}
	return 0
}

func (m *TableResult) GetGreetType() int32 {
	if m != nil {
		return m.GreetType
	}
	return 0
}

type CardDeal struct {
	// 下一个叫牌座号
	CallSeat   int32 `protobuf:"varint,1,opt,name=callSeat" json:"callSeat,omitempty"`
	BankerSeat int32 `protobuf:"varint,2,opt,name=bankerSeat" json:"bankerSeat,omitempty"`
}

func (m *CardDeal) Reset()                    { *m = CardDeal{} }
func (m *CardDeal) String() string            { return proto.CompactTextString(m) }
func (*CardDeal) ProtoMessage()               {}
func (*CardDeal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CardDeal) GetCallSeat() int32 {
	if m != nil {
		return m.CallSeat
	}
	return 0
}

func (m *CardDeal) GetBankerSeat() int32 {
	if m != nil {
		return m.BankerSeat
	}
	return 0
}

type ChatMsg struct {
	// 座号
	Sid int32 `protobuf:"varint,1,opt,name=sid" json:"sid,omitempty"`
	// 消息类型或消息编码
	Mid int32 `protobuf:"varint,2,opt,name=mid" json:"mid,omitempty"`
	// 自定义消息内容
	Msg string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *ChatMsg) Reset()                    { *m = ChatMsg{} }
func (m *ChatMsg) String() string            { return proto.CompactTextString(m) }
func (*ChatMsg) ProtoMessage()               {}
func (*ChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ChatMsg) GetSid() int32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *ChatMsg) GetMid() int32 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ChatMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type NetInfo struct {
	// 座号
	Sid int32 `protobuf:"varint,1,opt,name=sid" json:"sid,omitempty"`
	// 网络状态[在线/掉线]
	Status bool `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
}

func (m *NetInfo) Reset()                    { *m = NetInfo{} }
func (m *NetInfo) String() string            { return proto.CompactTextString(m) }
func (*NetInfo) ProtoMessage()               {}
func (*NetInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *NetInfo) GetSid() int32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *NetInfo) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*Frame)(nil), "pb.Frame")
	proto.RegisterType((*EnterTableReq)(nil), "pb.EnterTableReq")
	proto.RegisterType((*SitdownReq)(nil), "pb.SitdownReq")
	proto.RegisterType((*BetReq)(nil), "pb.BetReq")
	proto.RegisterType((*DuelReq)(nil), "pb.DuelReq")
	proto.RegisterType((*FriendReq)(nil), "pb.FriendReq")
	proto.RegisterType((*GiftReq)(nil), "pb.GiftReq")
	proto.RegisterType((*ChatReq)(nil), "pb.ChatReq")
	proto.RegisterType((*DelegateReq)(nil), "pb.DelegateReq")
	proto.RegisterType((*GeRes)(nil), "pb.GeRes")
	proto.RegisterType((*RevealRes)(nil), "pb.RevealRes")
	proto.RegisterType((*Player)(nil), "pb.Player")
	proto.RegisterType((*Table)(nil), "pb.Table")
	proto.RegisterType((*PlayerSeat)(nil), "pb.PlayerSeat")
	proto.RegisterType((*Reveal)(nil), "pb.Reveal")
	proto.RegisterType((*GeCall)(nil), "pb.GeCall")
	proto.RegisterType((*GiveUp)(nil), "pb.GiveUp")
	proto.RegisterType((*Duel)(nil), "pb.Duel")
	proto.RegisterType((*Bet)(nil), "pb.Bet")
	proto.RegisterType((*DuelResult)(nil), "pb.DuelResult")
	proto.RegisterType((*FriendAdd)(nil), "pb.FriendAdd")
	proto.RegisterType((*FriendAddResult)(nil), "pb.FriendAddResult")
	proto.RegisterType((*SendGift)(nil), "pb.SendGift")
	proto.RegisterType((*GameOver)(nil), "pb.GameOver")
	proto.RegisterType((*TableResult)(nil), "pb.TableResult")
	proto.RegisterType((*CardDeal)(nil), "pb.CardDeal")
	proto.RegisterType((*ChatMsg)(nil), "pb.ChatMsg")
	proto.RegisterType((*NetInfo)(nil), "pb.NetInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GameService service

type GameServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (GameService_StreamClient, error)
}

type gameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameServiceClient(cc *grpc.ClientConn) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (GameService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GameService_serviceDesc.Streams[0], c.cc, "/pb.GameService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceStreamClient{stream}
	return x, nil
}

type GameService_StreamClient interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ClientStream
}

type gameServiceStreamClient struct {
	grpc.ClientStream
}

func (x *gameServiceStreamClient) Send(m *Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServiceStreamClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GameService service

type GameServiceServer interface {
	Stream(GameService_StreamServer) error
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServiceServer).Stream(&gameServiceStreamServer{stream})
}

type GameService_StreamServer interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ServerStream
}

type gameServiceStreamServer struct {
	grpc.ServerStream
}

func (x *gameServiceStreamServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServiceStreamServer) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _GameService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "game.proto",
}

func init() { proto.RegisterFile("game.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 991 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x06, 0x49, 0x91, 0x94, 0x46, 0x6e, 0x53, 0x10, 0x41, 0x40, 0x08, 0x6d, 0xe2, 0x12, 0x2d,
	0xa0, 0x4b, 0x8d, 0xd4, 0x39, 0x24, 0xe8, 0x03, 0x45, 0x23, 0xc7, 0x86, 0x5b, 0x24, 0x2d, 0xa8,
	0xb8, 0xf7, 0x15, 0x39, 0x92, 0x19, 0xf1, 0xa1, 0x2e, 0x57, 0x32, 0x84, 0xde, 0xfb, 0x3b, 0xfa,
	0x17, 0x7b, 0xee, 0xa5, 0x98, 0x7d, 0x90, 0xeb, 0xd4, 0x31, 0x60, 0xa3, 0xb7, 0xf9, 0x96, 0x3b,
	0xb3, 0x3b, 0xf3, 0x0d, 0xbf, 0x1d, 0x80, 0x15, 0xab, 0xf0, 0x68, 0xc3, 0x1b, 0xd1, 0x44, 0xee,
	0x66, 0x91, 0x7c, 0x0e, 0xfe, 0x29, 0x67, 0x15, 0x46, 0x31, 0x84, 0x1b, 0xb6, 0x2f, 0x1b, 0x96,
	0xc7, 0xce, 0xa1, 0x33, 0x3d, 0x48, 0x0d, 0x4c, 0x2e, 0xe0, 0xa3, 0x57, 0xb5, 0x40, 0xfe, 0x96,
	0x2d, 0x4a, 0x4c, 0xf1, 0xf7, 0xe8, 0x13, 0xf0, 0xb6, 0x85, 0xda, 0xe6, 0xa5, 0x64, 0x46, 0x0f,
	0xc1, 0x17, 0xcd, 0x1a, 0xeb, 0xd8, 0x3d, 0x74, 0xa6, 0xa3, 0x54, 0x81, 0xe8, 0x53, 0x18, 0xf1,
	0xa6, 0xa9, 0x66, 0x25, 0x6b, 0xdb, 0xd8, 0x3b, 0x74, 0xa6, 0x7e, 0xda, 0x2f, 0x24, 0x87, 0x00,
	0xf3, 0x42, 0xe4, 0xcd, 0x55, 0x4d, 0x31, 0x23, 0x18, 0xb4, 0xc8, 0x84, 0x0c, 0xea, 0xa7, 0xd2,
	0x4e, 0x1e, 0x43, 0xf0, 0x12, 0x05, 0x7d, 0x7d, 0x08, 0x7e, 0xd6, 0x14, 0x75, 0xab, 0xcf, 0x54,
	0x20, 0x79, 0x02, 0xe1, 0xc9, 0x16, 0x4b, 0xbd, 0x81, 0x17, 0x3b, 0x56, 0x9a, 0x0d, 0x12, 0x24,
	0x4f, 0x60, 0x74, 0xca, 0x0b, 0xac, 0x73, 0x7d, 0x82, 0x68, 0xce, 0xcd, 0xb5, 0xa5, 0x9d, 0xbc,
	0x86, 0xf0, 0xac, 0x58, 0x8a, 0x0f, 0x7c, 0x8e, 0x1e, 0x41, 0xb0, 0x2a, 0x96, 0xe2, 0x3c, 0x97,
	0x79, 0xf9, 0xa9, 0x46, 0xb4, 0xce, 0xaa, 0x66, 0x5b, 0x0b, 0x9d, 0x95, 0x46, 0xc9, 0x57, 0x10,
	0xce, 0x2e, 0x99, 0xd0, 0x35, 0xaa, 0x74, 0x8d, 0xfc, 0x94, 0x4c, 0xb9, 0xd2, 0xae, 0x74, 0x85,
	0xc8, 0x4c, 0xbe, 0x87, 0xf1, 0x09, 0x96, 0xb8, 0x62, 0x42, 0x96, 0xf5, 0x11, 0x04, 0x15, 0x8a,
	0xcb, 0xc6, 0x78, 0x69, 0x24, 0x4f, 0xcb, 0x44, 0xd1, 0xa8, 0xea, 0x0e, 0x53, 0x8d, 0x92, 0xe7,
	0xe0, 0x9f, 0x61, 0x8a, 0x2d, 0x5d, 0x3d, 0x6b, 0x72, 0x34, 0xb5, 0x23, 0x3b, 0x9a, 0xc0, 0x30,
	0x63, 0x65, 0x39, 0xa7, 0x9a, 0xaa, 0xcb, 0x77, 0x38, 0xa9, 0x60, 0x94, 0xe2, 0x0e, 0x59, 0x79,
	0x0f, 0x67, 0x49, 0x05, 0xe3, 0xb9, 0x22, 0xf4, 0x20, 0x55, 0x40, 0x79, 0xf0, 0xfc, 0xed, 0x7e,
	0x83, 0xf1, 0xc0, 0x78, 0x28, 0x9c, 0xfc, 0xe9, 0x42, 0xf0, 0x6b, 0xc9, 0xf6, 0xc8, 0x6f, 0xe8,
	0x9c, 0x09, 0x0c, 0x89, 0xeb, 0x19, 0x5d, 0x41, 0x1f, 0x65, 0x30, 0x1d, 0xb5, 0x28, 0x8b, 0x3a,
	0x97, 0x47, 0x0d, 0x53, 0x05, 0xba, 0x4e, 0x19, 0xf4, 0x9d, 0xa2, 0x92, 0x28, 0xea, 0xd8, 0x57,
	0xe4, 0x91, 0x4d, 0x6b, 0x75, 0x91, 0xad, 0xe3, 0x40, 0x16, 0x5c, 0xda, 0xb2, 0x94, 0x3b, 0x26,
	0x18, 0x8f, 0x43, 0xb9, 0xaa, 0x51, 0x9f, 0xd4, 0xd0, 0x4e, 0x2a, 0x86, 0x70, 0x81, 0x62, 0x46,
	0x81, 0x47, 0x32, 0xb0, 0x81, 0xd4, 0xd9, 0xd9, 0x25, 0xe3, 0x2c, 0x13, 0xc8, 0x63, 0x50, 0x9d,
	0xdd, 0x2d, 0xd0, 0x29, 0xad, 0x60, 0x62, 0xdb, 0xc6, 0x63, 0x45, 0xa4, 0x42, 0xc9, 0x3f, 0x0e,
	0xf8, 0xf2, 0x27, 0xa2, 0xc8, 0x82, 0x8c, 0x73, 0xc3, 0xb5, 0x81, 0xb7, 0x96, 0xfe, 0x31, 0xc0,
	0x82, 0xd5, 0x6b, 0xe4, 0xf2, 0xab, 0x6a, 0x3d, 0x6b, 0x85, 0xa2, 0xbe, 0x63, 0xd9, 0x7a, 0xd3,
	0xa8, 0xe2, 0x78, 0xa9, 0x81, 0xf2, 0xf7, 0x68, 0xb6, 0x75, 0x2e, 0x0b, 0xe4, 0xa7, 0x0a, 0xd0,
	0x59, 0xd2, 0x78, 0x89, 0x42, 0x56, 0xc9, 0x4b, 0x3b, 0x6c, 0xe5, 0x10, 0xda, 0x39, 0x44, 0x5f,
	0x40, 0xb8, 0x91, 0x5c, 0x52, 0xad, 0xbc, 0xe9, 0xf8, 0x18, 0x8e, 0x36, 0x8b, 0x23, 0x45, 0x6f,
	0x6a, 0x3e, 0x75, 0x4d, 0x35, 0xea, 0x9b, 0x2a, 0x79, 0x03, 0xa0, 0xb6, 0xc9, 0xbb, 0xfe, 0xb7,
	0x13, 0x0c, 0xaf, 0xae, 0xc5, 0xab, 0x5d, 0x0d, 0xef, 0xbd, 0x2e, 0x7e, 0x07, 0x81, 0xea, 0xe2,
	0x9b, 0xb4, 0xe3, 0x7f, 0x6e, 0xe1, 0x17, 0x10, 0x9c, 0xe1, 0x8c, 0x95, 0x77, 0x3e, 0x4b, 0x7a,
	0x16, 0x3b, 0xbc, 0xd8, 0xdc, 0xd9, 0xf3, 0x37, 0x18, 0x90, 0xba, 0xd1, 0x9e, 0x25, 0x6f, 0xaa,
	0x79, 0xef, 0xdb, 0x61, 0x62, 0x49, 0x34, 0x96, 0xb7, 0x46, 0xb7, 0xd6, 0xed, 0x67, 0xf0, 0x88,
	0xe0, 0x9b, 0xae, 0xd3, 0xc9, 0xac, 0x6b, 0xc9, 0xec, 0xad, 0xc1, 0xfe, 0x76, 0x00, 0x94, 0x06,
	0xb7, 0xdb, 0x52, 0xdc, 0xeb, 0xae, 0x31, 0x84, 0x57, 0x45, 0x6d, 0x45, 0x37, 0x30, 0xfa, 0x16,
	0x46, 0xf9, 0x16, 0xcb, 0x99, 0xe4, 0x6a, 0x20, 0xbb, 0xed, 0x33, 0xea, 0xb6, 0xfe, 0x40, 0x69,
	0xca, 0xef, 0xaf, 0x6a, 0xc1, 0xf7, 0x69, 0xbf, 0xff, 0xda, 0xad, 0xfd, 0xeb, 0xb7, 0x9e, 0x7c,
	0x07, 0x1f, 0x5f, 0x77, 0xa4, 0x76, 0x5c, 0xe3, 0xde, 0xc8, 0xf5, 0x1a, 0xf7, 0x54, 0x8b, 0x1d,
	0x2b, 0xb7, 0x4a, 0x95, 0x0e, 0x52, 0x05, 0xbe, 0x71, 0x5f, 0x38, 0xc9, 0x73, 0xf3, 0xaa, 0xfc,
	0x98, 0x4b, 0x71, 0xa6, 0x0c, 0xbb, 0x87, 0x43, 0xa3, 0xee, 0x39, 0x71, 0xad, 0xd7, 0xe6, 0x02,
	0x1e, 0x74, 0x8e, 0xba, 0x60, 0x77, 0x70, 0x57, 0xef, 0x40, 0x86, 0x1b, 0xa1, 0xf5, 0x50, 0xa3,
	0x64, 0x09, 0xc3, 0x39, 0xd6, 0x39, 0x3d, 0x64, 0x77, 0x8d, 0xa7, 0x5f, 0x37, 0xef, 0x03, 0xaf,
	0xdb, 0xe0, 0xda, 0xeb, 0xf6, 0x97, 0x03, 0xc3, 0x33, 0x56, 0xe1, 0x2f, 0x3b, 0xa5, 0x71, 0x57,
	0x45, 0x7d, 0xd1, 0xfd, 0xc2, 0x1a, 0x45, 0x4f, 0x21, 0xe0, 0x32, 0xb5, 0xd8, 0x95, 0x84, 0xc5,
	0x44, 0x98, 0xf1, 0x3a, 0x52, 0x59, 0x2b, 0xae, 0xf4, 0xbe, 0xc9, 0x4f, 0x30, 0xb6, 0x96, 0x6d,
	0x26, 0x46, 0x8a, 0x89, 0x2f, 0x6d, 0x26, 0xc6, 0xc7, 0x0f, 0x28, 0xa2, 0x9e, 0x45, 0xc8, 0xcd,
	0xa6, 0xe6, 0x0f, 0x18, 0x5b, 0x5f, 0xa8, 0x07, 0xb4, 0x62, 0x9b, 0xc9, 0xa1, 0xc3, 0xbd, 0x08,
	0xb8, 0xb6, 0x08, 0x90, 0xb0, 0x93, 0x21, 0x55, 0x40, 0x8f, 0x2c, 0xdd, 0x02, 0x7d, 0x5d, 0x71,
	0x44, 0x61, 0x69, 0x44, 0xbf, 0x90, 0x9c, 0xc2, 0x90, 0x3a, 0xea, 0x84, 0x24, 0xc9, 0xee, 0x3e,
	0xe7, 0x56, 0x19, 0x77, 0xdf, 0x97, 0xf1, 0xe4, 0x07, 0x35, 0x45, 0xbc, 0x6e, 0x57, 0x54, 0x8c,
	0xb6, 0x9f, 0x22, 0x5a, 0x3d, 0x45, 0x14, 0x66, 0x1e, 0xb1, 0xe7, 0x0a, 0xaf, 0x9f, 0x2b, 0x9e,
	0x41, 0xf8, 0x06, 0xc5, 0x79, 0xbd, 0x6c, 0x6e, 0x08, 0xd0, 0x0b, 0xbb, 0x9e, 0x26, 0x14, 0x3a,
	0xfe, 0x1a, 0xc6, 0x44, 0xd3, 0x1c, 0xf9, 0xae, 0xc8, 0x30, 0x4a, 0x20, 0x98, 0x0b, 0x8e, 0xac,
	0x8a, 0x46, 0x54, 0x6f, 0x39, 0x23, 0x4e, 0x7a, 0x73, 0xea, 0x3c, 0x75, 0x16, 0x81, 0x1c, 0x23,
	0x9f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x42, 0x55, 0xb2, 0x1e, 0x54, 0x0a, 0x00, 0x00,
}
