// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	UserInfo
	UserId
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserInfo struct {
	Uid         int64            `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Unionid     string           `protobuf:"bytes,2,opt,name=unionid" json:"unionid,omitempty"`
	Uuid        string           `protobuf:"bytes,3,opt,name=uuid" json:"uuid,omitempty"`
	Username    string           `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	Password    string           `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Nick        string           `protobuf:"bytes,6,opt,name=nick" json:"nick,omitempty"`
	Gender      bool             `protobuf:"varint,7,opt,name=gender" json:"gender,omitempty"`
	Addr        string           `protobuf:"bytes,8,opt,name=addr" json:"addr,omitempty"`
	Avatar      string           `protobuf:"bytes,9,opt,name=avatar" json:"avatar,omitempty"`
	Isguest     bool             `protobuf:"varint,10,opt,name=isguest" json:"isguest,omitempty"`
	Condays     int32            `protobuf:"varint,11,opt,name=condays" json:"condays,omitempty"`
	Signdate    int64            `protobuf:"varint,12,opt,name=signdate" json:"signdate,omitempty"`
	Vipsigndate int64            `protobuf:"varint,13,opt,name=vipsigndate" json:"vipsigndate,omitempty"`
	Status      bool             `protobuf:"varint,14,opt,name=status" json:"status,omitempty"`
	Mtime       int64            `protobuf:"varint,15,opt,name=mtime" json:"mtime,omitempty"`
	Ctime       int64            `protobuf:"varint,16,opt,name=ctime" json:"ctime,omitempty"`
	Token       string           `protobuf:"bytes,17,opt,name=token" json:"token,omitempty"`
	Bankpwd     string           `protobuf:"bytes,18,opt,name=bankpwd" json:"bankpwd,omitempty"`
	Forbid      string           `protobuf:"bytes,19,opt,name=forbid" json:"forbid,omitempty"`
	Imsi        string           `protobuf:"bytes,20,opt,name=imsi" json:"imsi,omitempty"`
	Imei        string           `protobuf:"bytes,21,opt,name=imei" json:"imei,omitempty"`
	Mac         string           `protobuf:"bytes,22,opt,name=mac" json:"mac,omitempty"`
	Did         string           `protobuf:"bytes,23,opt,name=did" json:"did,omitempty"`
	Psystem     string           `protobuf:"bytes,24,opt,name=psystem" json:"psystem,omitempty"`
	Pmodel      string           `protobuf:"bytes,25,opt,name=pmodel" json:"pmodel,omitempty"`
	Others      map[string]int32 `protobuf:"bytes,26,rep,name=others" json:"others,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Coin        int64            `protobuf:"varint,27,opt,name=coin" json:"coin,omitempty"`
	Gem         int32            `protobuf:"varint,28,opt,name=gem" json:"gem,omitempty"`
	Bank        int64            `protobuf:"varint,29,opt,name=bank" json:"bank,omitempty"`
	Growth      int32            `protobuf:"varint,30,opt,name=growth" json:"growth,omitempty"`
	Level       int32            `protobuf:"varint,31,opt,name=level" json:"level,omitempty"`
	Viptype     int32            `protobuf:"varint,32,opt,name=viptype" json:"viptype,omitempty"`
	Vipexpiry   int64            `protobuf:"varint,33,opt,name=vipexpiry" json:"vipexpiry,omitempty"`
	Voucher     int32            `protobuf:"varint,34,opt,name=voucher" json:"voucher,omitempty"`
	Online      int32            `protobuf:"varint,35,opt,name=online" json:"online,omitempty"`
	Props       map[string]int32 `protobuf:"bytes,36,rep,name=props" json:"props,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Gifts       map[string]int32 `protobuf:"bytes,37,rep,name=gifts" json:"gifts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Medals      map[string]int32 `protobuf:"bytes,38,rep,name=medals" json:"medals,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Friends     []int64          `protobuf:"varint,39,rep,packed,name=friends" json:"friends,omitempty"`
	Tags        []string         `protobuf:"bytes,40,rep,name=tags" json:"tags,omitempty"`
	Records     map[string]int32 `protobuf:"bytes,41,rep,name=records" json:"records,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Err         string           `protobuf:"bytes,99,opt,name=err" json:"err,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserInfo) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserInfo) GetUnionid() string {
	if m != nil {
		return m.Unionid
	}
	return ""
}

func (m *UserInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *UserInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserInfo) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *UserInfo) GetGender() bool {
	if m != nil {
		return m.Gender
	}
	return false
}

func (m *UserInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *UserInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserInfo) GetIsguest() bool {
	if m != nil {
		return m.Isguest
	}
	return false
}

func (m *UserInfo) GetCondays() int32 {
	if m != nil {
		return m.Condays
	}
	return 0
}

func (m *UserInfo) GetSigndate() int64 {
	if m != nil {
		return m.Signdate
	}
	return 0
}

func (m *UserInfo) GetVipsigndate() int64 {
	if m != nil {
		return m.Vipsigndate
	}
	return 0
}

func (m *UserInfo) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *UserInfo) GetMtime() int64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *UserInfo) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *UserInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserInfo) GetBankpwd() string {
	if m != nil {
		return m.Bankpwd
	}
	return ""
}

func (m *UserInfo) GetForbid() string {
	if m != nil {
		return m.Forbid
	}
	return ""
}

func (m *UserInfo) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *UserInfo) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *UserInfo) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *UserInfo) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *UserInfo) GetPsystem() string {
	if m != nil {
		return m.Psystem
	}
	return ""
}

func (m *UserInfo) GetPmodel() string {
	if m != nil {
		return m.Pmodel
	}
	return ""
}

func (m *UserInfo) GetOthers() map[string]int32 {
	if m != nil {
		return m.Others
	}
	return nil
}

func (m *UserInfo) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *UserInfo) GetGem() int32 {
	if m != nil {
		return m.Gem
	}
	return 0
}

func (m *UserInfo) GetBank() int64 {
	if m != nil {
		return m.Bank
	}
	return 0
}

func (m *UserInfo) GetGrowth() int32 {
	if m != nil {
		return m.Growth
	}
	return 0
}

func (m *UserInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UserInfo) GetViptype() int32 {
	if m != nil {
		return m.Viptype
	}
	return 0
}

func (m *UserInfo) GetVipexpiry() int64 {
	if m != nil {
		return m.Vipexpiry
	}
	return 0
}

func (m *UserInfo) GetVoucher() int32 {
	if m != nil {
		return m.Voucher
	}
	return 0
}

func (m *UserInfo) GetOnline() int32 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *UserInfo) GetProps() map[string]int32 {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *UserInfo) GetGifts() map[string]int32 {
	if m != nil {
		return m.Gifts
	}
	return nil
}

func (m *UserInfo) GetMedals() map[string]int32 {
	if m != nil {
		return m.Medals
	}
	return nil
}

func (m *UserInfo) GetFriends() []int64 {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *UserInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *UserInfo) GetRecords() map[string]int32 {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *UserInfo) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type UserId struct {
	Uid int64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *UserId) Reset()                    { *m = UserId{} }
func (m *UserId) String() string            { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()               {}
func (*UserId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserId) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func init() {
	proto.RegisterType((*UserInfo)(nil), "pb.UserInfo")
	proto.RegisterType((*UserId)(nil), "pb.UserId")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	GetUserInfo(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserInfo, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserInfo(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/pb.User/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	GetUserInfo(context.Context, *UserId) (*UserInfo, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfo(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _User_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0x1b, 0x37,
	0x10, 0xad, 0x2c, 0x4b, 0x96, 0x28, 0xb7, 0x75, 0x59, 0xd7, 0x1e, 0xab, 0x6e, 0xbb, 0x55, 0xbe,
	0xe4, 0x43, 0x84, 0xc4, 0xbe, 0xd8, 0xbe, 0x07, 0x46, 0x0e, 0x41, 0x82, 0x05, 0xf2, 0x03, 0x56,
	0xcb, 0x91, 0x4c, 0x48, 0x4b, 0x2e, 0x48, 0xae, 0x1c, 0xfd, 0x80, 0xfc, 0xef, 0x60, 0x38, 0xbb,
	0xb2, 0x8c, 0xf8, 0xa2, 0xdb, 0xbc, 0x37, 0x6f, 0x38, 0xc3, 0x37, 0x04, 0x85, 0xa8, 0x3c, 0xba,
	0x49, 0xe9, 0x6c, 0xb0, 0x72, 0xaf, 0x9c, 0x8e, 0xbe, 0x0f, 0x44, 0xef, 0xab, 0x47, 0xf7, 0xd1,
	0xcc, 0xac, 0x3c, 0x12, 0xed, 0x4a, 0x2b, 0x68, 0x25, 0xad, 0x71, 0x3b, 0xa5, 0x50, 0x82, 0x38,
	0xa8, 0x8c, 0xb6, 0x46, 0x2b, 0xd8, 0x4b, 0x5a, 0xe3, 0x7e, 0xda, 0x40, 0x29, 0xc5, 0x7e, 0x45,
	0xe2, 0x76, 0xa4, 0x63, 0x2c, 0x87, 0xa2, 0x47, 0xc7, 0x9b, 0xac, 0x40, 0xd8, 0x8f, 0xfc, 0x06,
	0x53, 0xae, 0xcc, 0xbc, 0x7f, 0xb0, 0x4e, 0x41, 0x87, 0x73, 0x0d, 0xa6, 0xb3, 0x8c, 0xce, 0x17,
	0xd0, 0xe5, 0xb3, 0x28, 0x96, 0x27, 0xa2, 0x3b, 0x47, 0xa3, 0xd0, 0xc1, 0x41, 0xd2, 0x1a, 0xf7,
	0xd2, 0x1a, 0x91, 0x36, 0x53, 0xca, 0x41, 0x8f, 0xb5, 0x14, 0x93, 0x36, 0x5b, 0x65, 0x21, 0x73,
	0xd0, 0x8f, 0x6c, 0x8d, 0x68, 0x7a, 0xed, 0xe7, 0x15, 0xfa, 0x00, 0x22, 0x1e, 0xd2, 0x40, 0xca,
	0xe4, 0xd6, 0xa8, 0x6c, 0xed, 0x61, 0x90, 0xb4, 0xc6, 0x9d, 0xb4, 0x81, 0x34, 0xa7, 0xd7, 0x73,
	0xa3, 0xb2, 0x80, 0x70, 0x18, 0x8d, 0xd8, 0x60, 0x99, 0x88, 0xc1, 0x4a, 0x97, 0x9b, 0xf4, 0xaf,
	0x31, 0xbd, 0x4d, 0xd1, 0x24, 0x3e, 0x64, 0xa1, 0xf2, 0xf0, 0x1b, 0x4f, 0xcd, 0x48, 0x1e, 0x8b,
	0x4e, 0x11, 0x74, 0x81, 0xf0, 0x7b, 0xac, 0x61, 0x40, 0x6c, 0x1e, 0xd9, 0x23, 0x66, 0xf3, 0x86,
	0x0d, 0x76, 0x81, 0x06, 0xfe, 0x88, 0x97, 0x61, 0x40, 0x13, 0x4f, 0x33, 0xb3, 0x28, 0x1f, 0x14,
	0x48, 0xde, 0x44, 0x0d, 0xa9, 0xe7, 0xcc, 0xba, 0xa9, 0x56, 0xf0, 0x27, 0xdf, 0x9e, 0x11, 0x39,
	0xa5, 0x0b, 0xaf, 0xe1, 0x98, 0x9d, 0xa2, 0x98, 0x39, 0xd4, 0xf0, 0x57, 0xc3, 0xa1, 0xa6, 0xad,
	0x17, 0x59, 0x0e, 0x27, 0x91, 0xa2, 0x90, 0x18, 0xa5, 0x15, 0x9c, 0x32, 0xa3, 0xf8, 0x1d, 0x94,
	0x7e, 0xed, 0x03, 0x16, 0x00, 0xdc, 0xbd, 0x86, 0xd4, 0xbd, 0x2c, 0xac, 0xc2, 0x25, 0x9c, 0x71,
	0x77, 0x46, 0xf2, 0x9d, 0xe8, 0xda, 0x70, 0x8f, 0xce, 0xc3, 0x30, 0x69, 0x8f, 0x07, 0x97, 0x30,
	0x29, 0xa7, 0x93, 0xe6, 0xa5, 0x4d, 0x3e, 0xc7, 0xd4, 0x07, 0x13, 0xdc, 0x3a, 0xad, 0x75, 0x34,
	0x5b, 0x6e, 0xb5, 0x81, 0xbf, 0xa3, 0x19, 0x31, 0xa6, 0x49, 0xe6, 0x58, 0xc0, 0x79, 0xdc, 0x11,
	0x85, 0xa4, 0xa2, 0x8b, 0xc3, 0x3f, 0xac, 0xa2, 0x38, 0xbe, 0x15, 0x67, 0x1f, 0xc2, 0x3d, 0xfc,
	0x1b, 0x85, 0x35, 0x22, 0x27, 0x97, 0xb8, 0xc2, 0x25, 0xfc, 0x17, 0x69, 0x06, 0x74, 0x97, 0x95,
	0x2e, 0xc3, 0xba, 0x44, 0x48, 0x78, 0xf7, 0x35, 0x94, 0xe7, 0xa2, 0xbf, 0xd2, 0x25, 0x7e, 0x2b,
	0xb5, 0x5b, 0xc3, 0xff, 0xb1, 0xc1, 0x23, 0x11, 0xeb, 0x6c, 0x95, 0xdf, 0xa3, 0x83, 0x51, 0x5d,
	0xc7, 0x90, 0xfa, 0x5b, 0xb3, 0xd4, 0x06, 0xe1, 0x05, 0xf7, 0x67, 0x24, 0xdf, 0x8a, 0x4e, 0xe9,
	0x6c, 0xe9, 0xe1, 0x65, 0xb4, 0xe0, 0xf4, 0x89, 0x05, 0x5f, 0x28, 0xc3, 0x0e, 0xb0, 0x8a, 0xe4,
	0x73, 0x3d, 0x0b, 0x1e, 0x5e, 0x3d, 0x23, 0xbf, 0xa3, 0x4c, 0x2d, 0x8f, 0x2a, 0x72, 0xb8, 0x40,
	0x95, 0x2d, 0x3d, 0xbc, 0x7e, 0xc6, 0xe1, 0x4f, 0x31, 0x55, 0x3b, 0xcc, 0x3a, 0xba, 0xc1, 0xcc,
	0x69, 0x34, 0xca, 0xc3, 0x9b, 0xa4, 0x3d, 0x6e, 0xa7, 0x0d, 0x24, 0x57, 0x43, 0x36, 0xf7, 0x30,
	0x4e, 0xda, 0xf4, 0x2e, 0x28, 0x96, 0x57, 0xe2, 0xc0, 0x61, 0x6e, 0x9d, 0xf2, 0x70, 0x11, 0x1b,
	0x9c, 0x3d, 0x69, 0x90, 0x72, 0x8e, 0x3b, 0x34, 0x4a, 0x5a, 0x18, 0x3a, 0x07, 0x39, 0x3f, 0x1d,
	0x74, 0x6e, 0x78, 0x23, 0x06, 0x5b, 0xdb, 0x26, 0xc1, 0x02, 0xd7, 0xf1, 0x8f, 0xe9, 0xa7, 0x14,
	0xd2, 0x96, 0x56, 0xd9, 0xb2, 0xc2, 0xf8, 0xc3, 0x74, 0x52, 0x06, 0xb7, 0x7b, 0xd7, 0xad, 0xe1,
	0xb5, 0x10, 0x8f, 0x2e, 0xed, 0x5a, 0xf9, 0x68, 0xd8, 0x4e, 0x95, 0x37, 0x62, 0xb0, 0x65, 0xdd,
	0x4e, 0xa5, 0xb7, 0xe2, 0x70, 0xdb, 0x94, 0x5d, 0x6a, 0x47, 0x43, 0xd1, 0x8d, 0xce, 0xaa, 0x9f,
	0x3f, 0xe1, 0xcb, 0xf7, 0x62, 0x9f, 0x72, 0xf2, 0x42, 0x0c, 0xee, 0x30, 0x6c, 0x7e, 0x6b, 0xb1,
	0x59, 0x87, 0x1a, 0x1e, 0x6e, 0xaf, 0x66, 0xf4, 0xcb, 0xb4, 0x1b, 0x7f, 0xf8, 0xab, 0x1f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x96, 0x99, 0xaf, 0x06, 0xef, 0x05, 0x00, 0x00,
}
